
  isc.SchemaSet.create({
    serviceNamespace:"urn:partner.soap.sforce.com",
    schema:[
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"sObject",
            fields:{
                type:{type:"string", xmlRequired:true, name:"type"},
                fieldsToNull:{nillable:"true", type:"string", xmlRequired:false, name:"fieldsToNull"},
                Id:{nillable:"true", type:"ID", xmlRequired:true, name:"Id"}
            }
        })

    ],
    schemaNamespace:"urn:sobject.partner.soap.sforce.com",
    qualifyAll:true
})

  isc.SchemaSet.create({
    serviceNamespace:"urn:partner.soap.sforce.com",
    schema:[
        isc.XSElement.create({
            mustQualify:true,
            ID:"login",
            fields:{
                username:{type:"string", xmlRequired:true, name:"username"},
                password:{type:"string", xmlRequired:true, name:"password"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"loginResponse",
            fields:{
                result:{type:"LoginResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeSObject",
            fields:{
                sObjectType:{type:"string", xmlRequired:true, name:"sObjectType"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeSObjectResponse",
            fields:{
                result:{type:"DescribeSObjectResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeSObjects",
            fields:{
                sObjectType:{type:"string", xmlRequired:true, name:"sObjectType"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeSObjectsResponse",
            fields:{
                result:{type:"DescribeSObjectResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeGlobal",
            fields:{}
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeGlobalResponse",
            fields:{
                result:{type:"DescribeGlobalResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeLayout",
            fields:{
                sObjectType:{type:"string", xmlRequired:true, name:"sObjectType"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeLayoutResponse",
            fields:{
                result:{type:"DescribeLayoutResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeTabs",
            fields:{}
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"describeTabsResponse",
            fields:{
                result:{type:"DescribeTabSetResult", xmlRequired:false, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"create",
            fields:{
                sObjects:{type:"sObject", xmlRequired:true, name:"sObjects"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"createResponse",
            fields:{
                result:{type:"SaveResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"update",
            fields:{
                sObjects:{type:"sObject", xmlRequired:true, name:"sObjects"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"updateResponse",
            fields:{
                result:{type:"SaveResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"delete",
            fields:{
                ids:{type:"ID", xmlRequired:true, name:"ids"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"deleteResponse",
            fields:{
                result:{type:"DeleteResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"retrieve",
            fields:{
                fieldList:{type:"string", xmlRequired:true, name:"fieldList"},
                sObjectType:{type:"string", xmlRequired:true, name:"sObjectType"},
                ids:{type:"ID", xmlRequired:true, name:"ids"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"retrieveResponse",
            fields:{
                result:{nillable:"true", type:"sObject", xmlRequired:false, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"convertLead",
            fields:{
                leadConverts:{type:"LeadConvert", xmlRequired:true, name:"leadConverts"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"convertLeadResponse",
            fields:{
                result:{type:"LeadConvertResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getUpdated",
            fields:{
                sObjectType:{type:"string", xmlRequired:true, name:"sObjectType"},
                startDate:{type:"dateTime", xmlRequired:true, name:"startDate"},
                endDate:{type:"dateTime", xmlRequired:true, name:"endDate"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getUpdatedResponse",
            fields:{
                result:{type:"GetUpdatedResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getDeleted",
            fields:{
                sObjectType:{type:"string", xmlRequired:true, name:"sObjectType"},
                startDate:{type:"dateTime", xmlRequired:true, name:"startDate"},
                endDate:{type:"dateTime", xmlRequired:true, name:"endDate"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getDeletedResponse",
            fields:{
                result:{type:"GetDeletedResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"query",
            fields:{
                queryString:{type:"string", xmlRequired:true, name:"queryString"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"queryResponse",
            fields:{
                result:{type:"QueryResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"queryMore",
            fields:{
                queryLocator:{type:"QueryLocator", xmlRequired:true, name:"queryLocator"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"queryMoreResponse",
            fields:{
                result:{type:"QueryResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"search",
            fields:{
                searchString:{type:"string", xmlRequired:true, name:"searchString"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"searchResponse",
            fields:{
                result:{type:"SearchResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getServerTimestamp",
            fields:{}
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getServerTimestampResponse",
            fields:{
                result:{type:"GetServerTimestampResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"setPassword",
            fields:{
                userId:{type:"ID", xmlRequired:true, name:"userId"},
                password:{type:"string", xmlRequired:true, name:"password"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"setPasswordResponse",
            fields:{
                result:{type:"SetPasswordResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"resetPassword",
            fields:{
                userId:{type:"ID", xmlRequired:true, name:"userId"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"resetPasswordResponse",
            fields:{
                result:{type:"ResetPasswordResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getUserInfo",
            fields:{}
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"getUserInfoResponse",
            fields:{
                result:{type:"GetUserInfoResult", xmlRequired:true, name:"result"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"SessionHeader",
            fields:{
                sessionId:{type:"string", xmlRequired:true, name:"sessionId"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"CallOptions",
            fields:{
                client:{type:"string", xmlRequired:true, name:"client"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"QueryOptions",
            fields:{
                batchSize:{type:"int", xmlRequired:false, name:"batchSize"}
            }
        })
,
        isc.XSElement.create({
            mustQualify:true,
            ID:"AssignmentRuleHeader",
            fields:{
                assignmentRuleId:{nillable:"true", type:"ID", xmlRequired:true, name:"assignmentRuleId"},
                useDefaultRule:{nillable:"true", type:"boolean", xmlRequired:true, name:"useDefaultRule"}
            }
        })
,
        isc.SimpleType.create({
            inheritsFrom:"string",
            xmlNonEmpty:true,
            name:"ID",
            validators:[
                {
                    min:18,
                    max:18,
                    type:"lengthRange"
                },
                {expression:"[a-zA-Z0-9]{18}", type:"regexp"}
            ]
        })
,
        isc.SimpleType.create({inheritsFrom:"string", name:"QueryLocator"})
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"QueryResult",
            fields:{
                done:{type:"boolean", xmlRequired:true, name:"done"},
                queryLocator:{nillable:"true", type:"QueryLocator", xmlRequired:true, name:"queryLocator"},
                records:{nillable:"true", type:"sObject", xmlRequired:false, name:"records"},
                size:{type:"int", xmlRequired:true, name:"size"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"SearchResult",
            fields:{
                searchRecords:{type:"SearchRecord", xmlRequired:false, name:"searchRecords"},
                sforceReserved:{type:"string", xmlRequired:false, name:"sforceReserved"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"SearchRecord",
            fields:{
                record:{type:"sObject", xmlRequired:true, name:"record"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"GetUpdatedResult",
            fields:{
                ids:{type:"ID", xmlRequired:false, name:"ids"},
                sforceReserved:{type:"string", xmlRequired:false, name:"sforceReserved"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"GetDeletedResult",
            fields:{
                deletedRecords:{type:"DeletedRecord", xmlRequired:false, name:"deletedRecords"},
                sforceReserved:{type:"string", xmlRequired:false, name:"sforceReserved"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DeletedRecord",
            fields:{
                deletedDate:{type:"dateTime", xmlRequired:true, name:"deletedDate"},
                id:{type:"ID", xmlRequired:true, name:"id"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"GetServerTimestampResult",
            fields:{
                timestamp:{type:"dateTime", xmlRequired:true, name:"timestamp"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"SetPasswordResult",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"ResetPasswordResult",
            fields:{
                password:{type:"string", xmlRequired:true, name:"password"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"GetUserInfoResult",
            fields:{
                currencySymbol:{nillable:"true", type:"string", xmlRequired:true, name:"currencySymbol"},
                organizationId:{type:"ID", xmlRequired:true, name:"organizationId"},
                organizationMultiCurrency:{type:"boolean", xmlRequired:true, name:"organizationMultiCurrency"},
                organizationName:{type:"string", xmlRequired:true, name:"organizationName"},
                userDefaultCurrencyIsoCode:{nillable:"true", type:"string", xmlRequired:true, name:"userDefaultCurrencyIsoCode"},
                userEmail:{type:"string", xmlRequired:true, name:"userEmail"},
                userFullName:{type:"string", xmlRequired:true, name:"userFullName"},
                userId:{type:"ID", xmlRequired:true, name:"userId"},
                userLanguage:{type:"string", xmlRequired:true, name:"userLanguage"},
                userLocale:{type:"string", xmlRequired:true, name:"userLocale"},
                userTimeZone:{type:"string", xmlRequired:true, name:"userTimeZone"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"LoginResult",
            fields:{
                passwordExpired:{type:"boolean", xmlRequired:true, name:"passwordExpired"},
                serverUrl:{nillable:"true", type:"string", xmlRequired:true, name:"serverUrl"},
                sessionId:{nillable:"true", type:"string", xmlRequired:true, name:"sessionId"},
                userId:{nillable:"true", type:"ID", xmlRequired:true, name:"userId"},
                userInfo:{type:"GetUserInfoResult", xmlRequired:true, name:"userInfo"}
            }
        })
,
        isc.SimpleType.create({
            inheritsFrom:"string",
            valueMap:["ASSIGNEE_TYPE_REQUIRED", "BAD_CUSTOM_ENTITY_PARENT_DOMAIN", 
             "CANNOT_CASCADE_PRODUCT_ACTIVE","CANNOT_DEACTIVATE_DIVISION", "CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY", 
             "CANNOT_REPARENT_RECORD","CANNOT_RESOLVE_NAME", "CANNOT_UPDATE_CONVERTED_LEAD", "CANT_DISABLE_CORP_CURRENCY", 
             "CANT_UNSET_CORP_CURRENCY","CHILD_SHARE_FAILS_PARENT", "CIRCULAR_DEPENDENCY", "CUSTOM_ENTITY_OR_FIELD_LIMIT", 
             "CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED","CUSTOM_INDEX_EXISTS", "DELETE_FAILED", "DELETE_REQUIRED_ON_CASCADE", 
             "DEPENDENCY_EXISTS","DUPLICATE_CASE_SOLUTION", "DUPLICATE_CUSTOM_TAB_MOTIF", "DUPLICATE_DEVELOPER_NAME", 
             "DUPLICATE_MASTER_LABEL","DUPLICATE_USERNAME", "DUPLICATE_VALUE", "ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE", 
             "ENTITY_IS_ARCHIVED","ENTITY_IS_DELETED", "ENTITY_IS_LOCKED", "FAILED_ACTIVATION", 
             "FIELD_INTEGRITY_EXCEPTION","INACTIVE_OWNER_OR_USER", "INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY", 
             "INSUFFICIENT_ACCESS_OR_READONLY","INVALID_ACCESS_LEVEL", "INVALID_ARGUMENT_TYPE", "INVALID_ASSIGNEE_TYPE", 
             "INVALID_ASSIGNMENT_RULE","INVALID_BATCH_OPERATION", "INVALID_CREDIT_CARD_INFO", "INVALID_CROSS_REFERENCE_KEY", 
             "INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD","INVALID_CURRENCY_CONV_RATE", "INVALID_CURRENCY_ISO", "INVALID_EMAIL_ADDRESS", 
             "INVALID_EMPTY_KEY_OWNER","INVALID_FIELD", "INVALID_FIELD_FOR_INSERT_UPDATE", "INVALID_FILTER_ACTION", 
             "INVALID_ID_FIELD","INVALID_INET_ADDRESS", "INVALID_LINEITEM_CLONE_STATE", "INVALID_OPERATION", 
             "INVALID_OPERATOR","INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST", "INVALID_STATUS", "INVALID_TYPE", 
             "INVALID_TYPE_FOR_OPERATION","INVALID_TYPE_ON_FIELD_IN_RECORD", "LAST_MODIFIED_SINCE_TOO_OLD", 
             "LICENSE_LIMIT_EXCEEDED","MALFORMED_ID", "MAXIMUM_CCEMAILS_EXCEEDED", "MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED", 
             "MAXIMUM_SIZE_OF_ATTACHMENT","MAXIMUM_SIZE_OF_DOCUMENT", "MAX_ACTIONS_PER_RULE_EXCEEDED", 
             "MAX_ACTIVE_RULES_EXCEEDED","MAX_TASK_DESCRIPTION_EXCEEEDED", "MISSING_ARGUMENT", "NONUNIQUE_SHIPPING_ADDRESS", 
             "NUMBER_OUTSIDE_VALID_RANGE","PRIVATE_CONTACT_ON_ASSET", "REQUIRED_FIELD_MISSING", "SHARE_NEEDED_FOR_CHILD_OWNER", 
             "STANDARD_PRICE_NOT_DEFINED","STORAGE_LIMIT_EXCEEDED", "TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET", "TOO_MANY_ENUM_VALUE", 
             "TRANSFER_REQUIRES_READ","UNKNOWN_EXCEPTION", "UNSPECIFIED_EMAIL_ADDRESS"],
            name:"StatusCode"
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"Error",
            fields:{
                fields:{nillable:"true", type:"string", xmlRequired:false, name:"fields"},
                message:{type:"string", xmlRequired:true, name:"message"},
                statusCode:{type:"StatusCode", xmlRequired:true, name:"statusCode"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"SaveResult",
            fields:{
                errors:{nillable:"true", type:"Error", xmlRequired:false, name:"errors"},
                id:{nillable:"true", type:"ID", xmlRequired:true, name:"id"},
                success:{type:"boolean", xmlRequired:true, name:"success"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DeleteResult",
            fields:{
                errors:{nillable:"true", type:"Error", xmlRequired:false, name:"errors"},
                id:{nillable:"true", type:"ID", xmlRequired:true, name:"id"},
                success:{type:"boolean", xmlRequired:true, name:"success"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"LeadConvert",
            fields:{
                accountId:{nillable:"true", type:"ID", xmlRequired:true, name:"accountId"},
                contactId:{nillable:"true", type:"ID", xmlRequired:true, name:"contactId"},
                convertedStatus:{type:"string", xmlRequired:true, name:"convertedStatus"},
                doNotCreateOpportunity:{type:"boolean", xmlRequired:true, name:"doNotCreateOpportunity"},
                leadId:{type:"ID", xmlRequired:true, name:"leadId"},
                opportunityName:{nillable:"true", type:"string", xmlRequired:true, name:"opportunityName"},
                overwriteLeadSource:{type:"boolean", xmlRequired:true, name:"overwriteLeadSource"},
                ownerId:{nillable:"true", type:"ID", xmlRequired:true, name:"ownerId"},
                sendNotificationEmail:{type:"boolean", xmlRequired:true, name:"sendNotificationEmail"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"LeadConvertResult",
            fields:{
                accountId:{nillable:"true", type:"ID", xmlRequired:true, name:"accountId"},
                contactId:{nillable:"true", type:"ID", xmlRequired:true, name:"contactId"},
                errors:{nillable:"true", type:"Error", xmlRequired:false, name:"errors"},
                leadId:{nillable:"true", type:"ID", xmlRequired:true, name:"leadId"},
                opportunityId:{nillable:"true", type:"ID", xmlRequired:true, name:"opportunityId"},
                success:{type:"boolean", xmlRequired:true, name:"success"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeSObjectResult",
            fields:{
                activateable:{type:"boolean", xmlRequired:true, name:"activateable"},
                childRelationships:{type:"ChildRelationship", xmlRequired:false, name:"childRelationships"},
                createable:{type:"boolean", xmlRequired:true, name:"createable"},
                custom:{type:"boolean", xmlRequired:true, name:"custom"},
                deletable:{type:"boolean", xmlRequired:true, name:"deletable"},
                fields:{nillable:"true", type:"Field", xmlRequired:false, name:"fields"},
                keyPrefix:{nillable:"true", type:"string", xmlRequired:true, name:"keyPrefix"},
                label:{type:"string", xmlRequired:true, name:"label"},
                labelPlural:{type:"string", xmlRequired:true, name:"labelPlural"},
                layoutable:{type:"boolean", xmlRequired:true, name:"layoutable"},
                name:{type:"string", xmlRequired:true, name:"name"},
                queryable:{type:"boolean", xmlRequired:true, name:"queryable"},
                replicateable:{type:"boolean", xmlRequired:true, name:"replicateable"},
                retrieveable:{type:"boolean", xmlRequired:true, name:"retrieveable"},
                searchable:{type:"boolean", xmlRequired:true, name:"searchable"},
                undeletable:{type:"boolean", xmlRequired:true, name:"undeletable"},
                updateable:{type:"boolean", xmlRequired:true, name:"updateable"},
                urlDetail:{nillable:"true", type:"string", xmlRequired:true, name:"urlDetail"},
                urlEdit:{nillable:"true", type:"string", xmlRequired:true, name:"urlEdit"},
                urlNew:{nillable:"true", type:"string", xmlRequired:true, name:"urlNew"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"ChildRelationship",
            fields:{
                cascadeDelete:{type:"boolean", xmlRequired:true, name:"cascadeDelete"},
                childSObject:{type:"string", xmlRequired:true, name:"childSObject"},
                field:{type:"string", xmlRequired:true, name:"field"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeGlobalResult",
            fields:{
                encoding:{nillable:"true", type:"string", xmlRequired:true, name:"encoding"},
                maxBatchSize:{type:"int", xmlRequired:true, name:"maxBatchSize"},
                types:{nillable:"true", type:"string", xmlRequired:false, name:"types"}
            }
        })
,
        isc.SimpleType.create({
            inheritsFrom:"string",
            valueMap:["string", "picklist", "multipicklist", "combobox", "reference", "base64", "boolean", 
             "currency","textarea", "int", "double", "percent", "phone", "id", "date", "datetime", "url", 
             "email"],
            name:"fieldType"
        })
,
        isc.SimpleType.create({
            inheritsFrom:"string",
            valueMap:["tns:ID", "xsd:base64Binary", "xsd:boolean", "xsd:double", "xsd:int", "xsd:string", 
             "xsd:date","xsd:dateTime"],
            name:"soapType"
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"Field",
            fields:{
                autoNumber:{type:"boolean", xmlRequired:true, name:"autoNumber"},
                byteLength:{type:"int", xmlRequired:true, name:"byteLength"},
                calculated:{type:"boolean", xmlRequired:true, name:"calculated"},
                createable:{type:"boolean", xmlRequired:true, name:"createable"},
                custom:{type:"boolean", xmlRequired:true, name:"custom"},
                defaultedOnCreate:{type:"boolean", xmlRequired:true, name:"defaultedOnCreate"},
                digits:{type:"int", xmlRequired:true, name:"digits"},
                filterable:{type:"boolean", xmlRequired:true, name:"filterable"},
                label:{type:"string", xmlRequired:true, name:"label"},
                length:{type:"int", xmlRequired:true, name:"length"},
                name:{type:"string", xmlRequired:true, name:"name"},
                nameField:{type:"boolean", xmlRequired:true, name:"nameField"},
                nillable:{type:"boolean", xmlRequired:true, name:"nillable"},
                picklistValues:{nillable:"true", type:"PicklistEntry", xmlRequired:false, name:"picklistValues"},
                precision:{type:"int", xmlRequired:true, name:"precision"},
                referenceTo:{nillable:"true", type:"string", xmlRequired:false, name:"referenceTo"},
                restrictedPicklist:{type:"boolean", xmlRequired:true, name:"restrictedPicklist"},
                scale:{type:"int", xmlRequired:true, name:"scale"},
                soapType:{type:"soapType", xmlRequired:true, name:"soapType"},
                type:{type:"fieldType", xmlRequired:true, name:"type"},
                updateable:{type:"boolean", xmlRequired:true, name:"updateable"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"PicklistEntry",
            fields:{
                active:{type:"boolean", xmlRequired:true, name:"active"},
                defaultValue:{type:"boolean", xmlRequired:true, name:"defaultValue"},
                label:{nillable:"true", type:"string", xmlRequired:true, name:"label"},
                value:{type:"string", xmlRequired:true, name:"value"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeLayoutResult",
            fields:{
                layouts:{type:"DescribeLayout", xmlRequired:true, name:"layouts"},
                recordTypeMappings:{type:"RecordTypeMapping", xmlRequired:false, name:"recordTypeMappings"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeLayout",
            fields:{
                detailLayoutSections:{type:"DescribeLayoutSection", xmlRequired:false, name:"detailLayoutSections"},
                editLayoutSections:{type:"DescribeLayoutSection", xmlRequired:false, name:"editLayoutSections"},
                id:{type:"ID", xmlRequired:true, name:"id"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeLayoutSection",
            fields:{
                columns:{type:"int", xmlRequired:true, name:"columns"},
                heading:{type:"string", xmlRequired:true, name:"heading"},
                layoutRows:{type:"DescribeLayoutRow", xmlRequired:true, name:"layoutRows"},
                rows:{type:"int", xmlRequired:true, name:"rows"},
                useCollapsibleSection:{type:"boolean", xmlRequired:true, name:"useCollapsibleSection"},
                useHeading:{type:"boolean", xmlRequired:true, name:"useHeading"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeLayoutRow",
            fields:{
                layoutItems:{type:"DescribeLayoutItem", xmlRequired:true, name:"layoutItems"},
                numItems:{type:"int", xmlRequired:true, name:"numItems"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeLayoutItem",
            fields:{
                editable:{type:"boolean", xmlRequired:true, name:"editable"},
                label:{nillable:"true", type:"string", xmlRequired:true, name:"label"},
                layoutComponents:{type:"DescribeLayoutComponent", xmlRequired:false, name:"layoutComponents"},
                placeholder:{type:"boolean", xmlRequired:true, name:"placeholder"},
                required:{type:"boolean", xmlRequired:true, name:"required"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeLayoutComponent",
            fields:{
                tabOrder:{type:"int", xmlRequired:true, name:"tabOrder"},
                type:{type:"layoutComponentType", xmlRequired:true, name:"type"},
                value:{type:"string", xmlRequired:true, name:"value"}
            }
        })
,
        isc.SimpleType.create({
            inheritsFrom:"string",
            valueMap:["Field", "Separator"],
            name:"layoutComponentType"
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"RecordTypeMapping",
            fields:{
                available:{type:"boolean", xmlRequired:true, name:"available"},
                defaultRecordTypeMapping:{type:"boolean", xmlRequired:true, name:"defaultRecordTypeMapping"},
                layoutId:{type:"ID", xmlRequired:true, name:"layoutId"},
                name:{type:"string", xmlRequired:true, name:"name"},
                picklistsForRecordType:{nillable:"true", type:"PicklistForRecordType", xmlRequired:false,
                 name:"picklistsForRecordType"},
                recordTypeId:{nillable:"true", type:"ID", xmlRequired:true, name:"recordTypeId"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"PicklistForRecordType",
            fields:{
                picklistName:{type:"string", xmlRequired:true, name:"picklistName"},
                picklistValues:{nillable:"true", type:"PicklistEntry", xmlRequired:false, name:"picklistValues"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeTabSetResult",
            fields:{
                label:{type:"string", xmlRequired:true, name:"label"},
                logoUrl:{type:"string", xmlRequired:true, name:"logoUrl"},
                selected:{type:"boolean", xmlRequired:true, name:"selected"},
                tabs:{type:"DescribeTab", xmlRequired:false, name:"tabs"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"DescribeTab",
            fields:{
                custom:{type:"boolean", xmlRequired:true, name:"custom"},
                label:{type:"string", xmlRequired:true, name:"label"},
                sobjectName:{nillable:"true", type:"string", xmlRequired:true, name:"sobjectName"},
                url:{type:"string", xmlRequired:true, name:"url"}
            }
        })

    ],
    schemaNamespace:"urn:partner.soap.sforce.com",
    qualifyAll:true
})

  isc.SchemaSet.create({
    serviceNamespace:"urn:partner.soap.sforce.com",
    schema:[
        isc.SimpleType.create({
            inheritsFrom:"string",
            valueMap:["API_CURRENTLY_DISABLED", "API_DISABLED_FOR_ORG", "EMAIL_TO_CASE_LIMIT_EXCEEDED", 
             "EMAIL_TO_CASE_NOT_ENABLED","EXCEEDED_ID_LIMIT", "EXCEEDED_LEAD_CONVERT_LIMIT", "EXCEEDED_MAX_SIZE_REQUEST", 
             "EXCEEDED_MAX_TYPES_LIMIT","EXCEEDED_QUOTA", "EXCEEDED_RATE_LIMIT", "FUNCTIONALITY_NOT_ENABLED", 
             "IMAGE_TOO_LARGE","INACTIVE_OWNER_OR_USER", "INSUFFICIENT_ACCESS", "INVALID_ASSIGNMENT_RULE", 
             "INVALID_BATCH_SIZE","INVALID_CLIENT", "INVALID_CROSS_REFERENCE_KEY", "INVALID_FIELD", "INVALID_ID_FIELD", 
             "INVALID_LOGIN","INVALID_NEW_PASSWORD", "INVALID_OPERATION", "INVALID_OPERATION_WITH_EXPIRED_PASSWORD", 
             "INVALID_QUERY_FILTER_OPERATOR","INVALID_QUERY_LOCATOR", "INVALID_QUERY_SCOPE", "INVALID_REPLICATION_DATE", 
             "INVALID_SEARCH","INVALID_SEARCH_SCOPE", "INVALID_SESSION_ID", "INVALID_SOAP_HEADER", 
             "INVALID_SSO_GATEWAY_URL","INVALID_TYPE", "INVALID_TYPE_FOR_OPERATION", "LOGIN_DURING_RESTRICTED_DOMAIN", 
             "LOGIN_DURING_RESTRICTED_TIME","MALFORMED_ID", "MALFORMED_QUERY", "MALFORMED_SEARCH", "MISSING_ARGUMENT", 
             "OPERATION_TOO_LARGE","ORG_LOCKED", "PASSWORD_LOCKOUT", "QUERY_TIMEOUT", "QUERY_TOO_COMPLICATED", 
             "SERVER_UNAVAILABLE","SSO_SERVICE_DOWN", "TRIAL_EXPIRED", "UNKNOWN_EXCEPTION", "UNSUPPORTED_API_VERSION", 
             "UNSUPPORTED_CLIENT"],
            name:"ExceptionCode"
        })
,
        isc.SimpleType.create({
            inheritsFrom:"QName",
            valueMap:["fns:API_CURRENTLY_DISABLED", "fns:API_DISABLED_FOR_ORG", 
             "fns:EMAIL_TO_CASE_LIMIT_EXCEEDED","fns:EMAIL_TO_CASE_NOT_ENABLED", "fns:EXCEEDED_ID_LIMIT", 
             "fns:EXCEEDED_LEAD_CONVERT_LIMIT","fns:EXCEEDED_MAX_SIZE_REQUEST", "fns:EXCEEDED_MAX_TYPES_LIMIT", "fns:EXCEEDED_QUOTA", 
             "fns:EXCEEDED_RATE_LIMIT","fns:FUNCTIONALITY_NOT_ENABLED", "fns:IMAGE_TOO_LARGE", "fns:INACTIVE_OWNER_OR_USER", 
             "fns:INSUFFICIENT_ACCESS","fns:INVALID_ASSIGNMENT_RULE", "fns:INVALID_BATCH_SIZE", "fns:INVALID_CLIENT", 
             "fns:INVALID_CROSS_REFERENCE_KEY","fns:INVALID_FIELD", "fns:INVALID_ID_FIELD", "fns:INVALID_LOGIN", 
             "fns:INVALID_NEW_PASSWORD","fns:INVALID_OPERATION", "fns:INVALID_OPERATION_WITH_EXPIRED_PASSWORD", 
             "fns:INVALID_QUERY_FILTER_OPERATOR","fns:INVALID_QUERY_LOCATOR", "fns:INVALID_QUERY_SCOPE", "fns:INVALID_REPLICATION_DATE", 
             "fns:INVALID_SEARCH","fns:INVALID_SEARCH_SCOPE", "fns:INVALID_SESSION_ID", "fns:INVALID_SOAP_HEADER", 
             "fns:INVALID_SSO_GATEWAY_URL","fns:INVALID_TYPE", "fns:INVALID_TYPE_FOR_OPERATION", 
             "fns:LOGIN_DURING_RESTRICTED_DOMAIN","fns:LOGIN_DURING_RESTRICTED_TIME", "fns:MALFORMED_ID", "fns:MALFORMED_QUERY", 
             "fns:MALFORMED_SEARCH","fns:MISSING_ARGUMENT", "fns:OPERATION_TOO_LARGE", "fns:ORG_LOCKED", 
             "fns:PASSWORD_LOCKOUT","fns:QUERY_TIMEOUT", "fns:QUERY_TOO_COMPLICATED", "fns:SERVER_UNAVAILABLE", 
             "fns:SSO_SERVICE_DOWN","fns:TRIAL_EXPIRED", "fns:UNKNOWN_EXCEPTION", "fns:UNSUPPORTED_API_VERSION", 
             "fns:UNSUPPORTED_CLIENT"],
            name:"FaultCode"
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            ID:"ApiFault",
            fields:{
                exceptionCode:{type:"ExceptionCode", xmlRequired:true, name:"exceptionCode"},
                exceptionMessage:{type:"string", xmlRequired:true, name:"exceptionMessage"}
            }
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiFault",
            ID:"ApiQueryFault",
            fields:{
                row:{type:"int", xmlRequired:true, name:"row"},
                column:{type:"int", xmlRequired:true, name:"column"}
            },
            useParentFieldOrder:true
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiFault",
            ID:"LoginFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"LoginFault",
            ID:"LoginFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiFault",
            ID:"InvalidQueryLocatorFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"InvalidQueryLocatorFault",
            ID:"InvalidQueryLocatorFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiFault",
            ID:"InvalidNewPasswordFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"InvalidNewPasswordFault",
            ID:"InvalidNewPasswordFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiFault",
            ID:"InvalidIdFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"InvalidIdFault",
            ID:"InvalidIdFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiFault",
            ID:"UnexpectedErrorFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"UnexpectedErrorFault",
            ID:"UnexpectedErrorFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiQueryFault",
            ID:"InvalidFieldFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"InvalidFieldFault",
            ID:"InvalidFieldFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiQueryFault",
            ID:"InvalidSObjectFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"InvalidSObjectFault",
            ID:"InvalidSObjectFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiQueryFault",
            ID:"MalformedQueryFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"MalformedQueryFault",
            ID:"MalformedQueryFault",
            fields:{}
        })
,
        isc.XSComplexType.create({
            mustQualify:true,
            inheritsFrom:"ApiQueryFault",
            ID:"MalformedSearchFault",
            fields:{},
            useParentFieldOrder:true
        })
,
        isc.XSElement.create({
            mustQualify:true,
            inheritsFrom:"MalformedSearchFault",
            ID:"MalformedSearchFault",
            fields:{}
        })

    ],
    schemaNamespace:"urn:fault.partner.soap.sforce.com",
    qualifyAll:true
})

  isc.WebService.create({
    dataURL:"https://www.salesforce.com/services/Soap/u/6.0",
    serviceNamespace:"urn:partner.soap.sforce.com",
    soapStyle:"document",
    operations:[
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"login",
            inputMessage:"loginRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"loginResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"describeSObject",
            inputMessage:"describeSObjectRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"describeSObjectResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"describeSObjects",
            inputMessage:"describeSObjectsRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"describeSObjectsResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"describeGlobal",
            inputMessage:"describeGlobalRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"describeGlobalResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"describeLayout",
            inputMessage:"describeLayoutRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"describeLayoutResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"describeTabs",
            inputMessage:"describeTabsRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"describeTabsResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"create",
            inputMessage:"createRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"},
                {message:"Header", encoding:"literal", part:"AssignmentRuleHeader"}
            ],
            outputMessage:"createResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"update",
            inputMessage:"updateRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"},
                {message:"Header", encoding:"literal", part:"AssignmentRuleHeader"}
            ],
            outputMessage:"updateResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"delete",
            inputMessage:"deleteRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"deleteResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"retrieve",
            inputMessage:"retrieveRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"},
                {message:"Header", encoding:"literal", part:"QueryOptions"}
            ],
            outputMessage:"retrieveResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"convertLead",
            inputMessage:"convertLeadRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"convertLeadResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"getDeleted",
            inputMessage:"getDeletedRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"getDeletedResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"getUpdated",
            inputMessage:"getUpdatedRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"getUpdatedResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"query",
            inputMessage:"queryRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"},
                {message:"Header", encoding:"literal", part:"QueryOptions"}
            ],
            outputMessage:"queryResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"queryMore",
            inputMessage:"queryMoreRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"},
                {message:"Header", encoding:"literal", part:"QueryOptions"}
            ],
            outputMessage:"queryMoreResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"search",
            inputMessage:"searchRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"searchResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"getServerTimestamp",
            inputMessage:"getServerTimestampRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"getServerTimestampResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"setPassword",
            inputMessage:"setPasswordRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"setPasswordResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"resetPassword",
            inputMessage:"resetPasswordRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"resetPasswordResponse"
        },
        {
            inputEncoding:"literal",
            outputEncoding:"literal",
            name:"getUserInfo",
            inputMessage:"getUserInfoRequest",
            soapAction:"",
            inputHeaders:[
                {message:"Header", encoding:"literal", part:"SessionHeader"},
                {message:"Header", encoding:"literal", part:"CallOptions"}
            ],
            outputMessage:"getUserInfoResponse"
        }
    ],
    messages:[
        isc.WSDLMessage.create({
            ID:"message:Header",
            fields:{
                SessionHeader:{type:"SessionHeader", xmlRequired:true, name:"SessionHeader"},
                CallOptions:{type:"CallOptions", xmlRequired:true, name:"CallOptions"},
                QueryOptions:{type:"QueryOptions", xmlRequired:true, name:"QueryOptions"},
                AssignmentRuleHeader:{type:"AssignmentRuleHeader", xmlRequired:true, name:"AssignmentRuleHeader"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:ApiFault",
            fields:{
                fault:{type:"ApiFault", xmlRequired:true, name:"fault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:LoginFault",
            fields:{
                LoginFault:{type:"LoginFault", xmlRequired:true, name:"LoginFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:InvalidQueryLocatorFault",
            fields:{
                InvalidQueryLocatorFault:{type:"InvalidQueryLocatorFault", xmlRequired:true, name:"InvalidQueryLocatorFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:InvalidNewPasswordFault",
            fields:{
                InvalidNewPasswordFault:{type:"InvalidNewPasswordFault", xmlRequired:true, name:"InvalidNewPasswordFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:InvalidIdFault",
            fields:{
                InvalidIdFault:{type:"InvalidIdFault", xmlRequired:true, name:"InvalidIdFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:UnexpectedErrorFault",
            fields:{
                UnexpectedErrorFault:{type:"UnexpectedErrorFault", xmlRequired:true, name:"UnexpectedErrorFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:InvalidFieldFault",
            fields:{
                InvalidFieldFault:{type:"InvalidFieldFault", xmlRequired:true, name:"InvalidFieldFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:InvalidSObjectFault",
            fields:{
                InvalidSObjectFault:{type:"InvalidSObjectFault", xmlRequired:true, name:"InvalidSObjectFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:MalformedQueryFault",
            fields:{
                MalformedQueryFault:{type:"MalformedQueryFault", xmlRequired:true, name:"MalformedQueryFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:MalformedSearchFault",
            fields:{
                MalformedSearchFault:{type:"MalformedSearchFault", xmlRequired:true, name:"MalformedSearchFault"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:loginRequest",
            fields:{
                login:{type:"login", xmlRequired:true, name:"login"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:loginResponse",
            fields:{
                loginResponse:{type:"loginResponse", xmlRequired:true, name:"loginResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeSObjectRequest",
            fields:{
                describeSObject:{type:"describeSObject", xmlRequired:true, name:"describeSObject"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeSObjectResponse",
            fields:{
                describeSObjectResponse:{type:"describeSObjectResponse", xmlRequired:true, name:"describeSObjectResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeSObjectsRequest",
            fields:{
                describeSObjects:{type:"describeSObjects", xmlRequired:true, name:"describeSObjects"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeSObjectsResponse",
            fields:{
                describeSObjectsResponse:{type:"describeSObjectsResponse", xmlRequired:true, name:"describeSObjectsResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeGlobalRequest",
            fields:{
                describeGlobal:{type:"describeGlobal", xmlRequired:true, name:"describeGlobal"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeGlobalResponse",
            fields:{
                describeGlobalResponse:{type:"describeGlobalResponse", xmlRequired:true, name:"describeGlobalResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeLayoutRequest",
            fields:{
                describeLayout:{type:"describeLayout", xmlRequired:true, name:"describeLayout"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeLayoutResponse",
            fields:{
                describeLayoutResponse:{type:"describeLayoutResponse", xmlRequired:true, name:"describeLayoutResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeTabsRequest",
            fields:{
                describeTabs:{type:"describeTabs", xmlRequired:true, name:"describeTabs"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:describeTabsResponse",
            fields:{
                describeTabsResponse:{type:"describeTabsResponse", xmlRequired:true, name:"describeTabsResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:createRequest",
            fields:{
                create:{type:"create", xmlRequired:true, name:"create"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:createResponse",
            fields:{
                createResponse:{type:"createResponse", xmlRequired:true, name:"createResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:updateRequest",
            fields:{
                update:{type:"update", xmlRequired:true, name:"update"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:updateResponse",
            fields:{
                updateResponse:{type:"updateResponse", xmlRequired:true, name:"updateResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:deleteRequest",
            fields:{
                "delete":{type:"delete", xmlRequired:true, name:"delete"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:deleteResponse",
            fields:{
                deleteResponse:{type:"deleteResponse", xmlRequired:true, name:"deleteResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:retrieveRequest",
            fields:{
                retrieve:{type:"retrieve", xmlRequired:true, name:"retrieve"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:retrieveResponse",
            fields:{
                retrieveResponse:{type:"retrieveResponse", xmlRequired:true, name:"retrieveResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:convertLeadRequest",
            fields:{
                convertLead:{type:"convertLead", xmlRequired:true, name:"convertLead"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:convertLeadResponse",
            fields:{
                convertLeadResponse:{type:"convertLeadResponse", xmlRequired:true, name:"convertLeadResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getDeletedRequest",
            fields:{
                getDeleted:{type:"getDeleted", xmlRequired:true, name:"getDeleted"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getDeletedResponse",
            fields:{
                getDeletedResponse:{type:"getDeletedResponse", xmlRequired:true, name:"getDeletedResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getUpdatedRequest",
            fields:{
                getUpdated:{type:"getUpdated", xmlRequired:true, name:"getUpdated"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getUpdatedResponse",
            fields:{
                getUpdatedResponse:{type:"getUpdatedResponse", xmlRequired:true, name:"getUpdatedResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:queryRequest",
            fields:{
                query:{type:"query", xmlRequired:true, name:"query"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:queryResponse",
            fields:{
                queryResponse:{type:"queryResponse", xmlRequired:true, name:"queryResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:queryMoreRequest",
            fields:{
                queryMore:{type:"queryMore", xmlRequired:true, name:"queryMore"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:queryMoreResponse",
            fields:{
                queryMoreResponse:{type:"queryMoreResponse", xmlRequired:true, name:"queryMoreResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:searchRequest",
            fields:{
                search:{type:"search", xmlRequired:true, name:"search"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:searchResponse",
            fields:{
                searchResponse:{type:"searchResponse", xmlRequired:true, name:"searchResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getServerTimestampRequest",
            fields:{
                getServerTimestamp:{type:"getServerTimestamp", xmlRequired:true, name:"getServerTimestamp"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getServerTimestampResponse",
            fields:{
                getServerTimestampResponse:{type:"getServerTimestampResponse", xmlRequired:true,
                 name:"getServerTimestampResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:setPasswordRequest",
            fields:{
                setPassword:{type:"setPassword", xmlRequired:true, name:"setPassword"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:setPasswordResponse",
            fields:{
                setPasswordResponse:{type:"setPasswordResponse", xmlRequired:true, name:"setPasswordResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:resetPasswordRequest",
            fields:{
                resetPassword:{type:"resetPassword", xmlRequired:true, name:"resetPassword"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:resetPasswordResponse",
            fields:{
                resetPasswordResponse:{type:"resetPasswordResponse", xmlRequired:true, name:"resetPasswordResponse"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getUserInfoRequest",
            fields:{
                getUserInfo:{type:"getUserInfo", xmlRequired:true, name:"getUserInfo"}
            }
        })
,
        isc.WSDLMessage.create({
            ID:"message:getUserInfoResponse",
            fields:{
                getUserInfoResponse:{type:"getUserInfoResponse", xmlRequired:true, name:"getUserInfoResponse"}
            }
        })

    ]
})

